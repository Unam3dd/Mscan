#!/usr/bin/python3
#-*- coding:utf-8 -*-

import sys
import time
import json
import shlex
import subprocess

try:
    from xsearch import * # virustotal search
except ImportError:
    print("[!] Error Import Xsearch !")

try:
    from md5sum import *
except ImportError:
    print("[!] Error Import MD5sum !")

try:
    from datetime import datetime
except ImportError:
    print("[!] Error Import Datetime !")

try:
    import requests
except ImportError:
    print("[!] Requests Required !")

try:
    import pefile
except ImportError:
    print("[!] PEfile Required !")

try:
    from tabulate import tabulate
except ImportError:
    print("[!] Tabulate Required !")


banner = '''
\033[38;5;160m

 ███▄ ▄███▓  ██████  ▄████▄   ▄▄▄       ███▄    █ 
▓██▒▀█▀ ██▒▒██    ▒ ▒██▀ ▀█  ▒████▄     ██ ▀█   █ 
▓██    ▓██░░ ▓██▄   ▒▓█    ▄ ▒██  ▀█▄  ▓██  ▀█ ██▒
▒██    ▒██   ▒   ██▒▒▓▓▄ ▄██▒░██▄▄▄▄██ ▓██▒  ▐▌██▒
▒██▒   ░██▒▒██████▒▒▒ ▓███▀ ░ ▓█   ▓██▒▒██░   ▓██░
░ ▒░   ░  ░▒ ▒▓▒ ▒ ░░ ░▒ ▒  ░ ▒▒   ▓▒█░░ ▒░   ▒ ▒ 
░  ░      ░░ ░▒  ░ ░  ░  ▒     ▒   ▒▒ ░░ ░░   ░ ▒░
░      ░   ░  ░  ░  ░          ░   ▒      ░   ░ ░ 
       ░         ░  ░ ░            ░  ░         ░ 
                    ░                             
        
\033[00m
        Automatic Analysis Tools

            [ Created By \033[38;5;160mUnam3dd \033[00m ]
            [ Github : \033[38;5;160mUnam3dd  \033[00m  ]

'''

MALICIOUS_FUNCTION = ["accept","AdjustTokenPrivileges","AttachThreadInput",
"bind","BitBlt","CallNextHookEx",
"CertOpenSystemStore","CheckRemoteDebuggerPresent","CoCreateInstance",
"connect","ConnectNamedPipe","ControlService",
"CreateFile","CreateFileMapping","CreateMutex",
"CreateProcess","CreateRemoteThread","CreateService",
"CreateToolhelp32Snapshot","CryptAcquireContext","DeviceIoControl",
"DllCanUnloadNow","DllGetClassObject","DllInstall",
"DllRegisterServer","DllUnregisterServer","EnableExecuteProtectionSupport",
"EnumProcesses","EnumProcessModules","FindFirstFile/FindNextFile",
"FindResource","FindWindow","FtpPutFile","GetAdaptersInfo",
"GetAsyncKeyState","GetDC","GetForegroundWindow",
"gethostbyname","gethostname","GetKeyState","GetModuleFilename",
"GetModuleHandle","GetProcAddress","GetStartupInfo","GetSystemDefaultLangId",
"GetTempPath","GetThreadContext","GetTickCount","GetVersionEx",
"GetWindowsDirectory","inet_addr","InternetOpen","InternetOpenUrl",
"InternetReadFile","InternetWriteFile","IsDebuggerPresent","IsNTAdmin",
"IsWoW64Process","LdrLoadDll","LoadLibrary","LoadResource","LsaEnumerateLogonSessions",
"MapViewOfFile","MapVirtualKey","MmGetSystemRoutineAddress","Module32First/Module32Next",
"NetScheduleJobAdd","NetShareEnum","NtQueryDirectoryFile","NtQueryInformationProcess",
"NtSetInformationProcess","OleInitialize","OpenMutex","OpenProcess","OpenSCManager",
"OutputDebugString","PeekNamedPipe","Process32First","Process32Next","QueryPerformanceCounter",
"QueueUserAPC","ReadProcessMemory","recv","RegisterHotKey","RegOpenKey","ResumeThread",
"RtlCreateRegistryKey","RtlWriteRegistryValue","SamIConnect","SamIGetPrivateData",
"SamQueryInformationUse","send","SetFileTime","SetThreadContext","SetWindowsHookEx",
"SfcTerminateWatcherThread","ShellExecute","StartServiceCtrlDispatcher",
"SuspendThread","system","Thread32First","Thread32Next","Toolhelp32ReadProcessMemory",
"URLDownloadToFile","VirtualAllocEx","VirtualProtectEx","WideCharToMultiByte","WinExec",
"WlxLoggedOnSAS","Wow64DisableWow64FsRedirection","WriteProcessMemory","WSAStartup",
"WSASocketA","WSAConnect","WSAGetLastError","closesocket","htons","ShellExecuteA","_popen"
"GetStartupInfoA","FreeConsole","CreateProcessA","CreateMutexA","GetTokenInformation","GetUserNameA","FtpPutFileA","FtpGetFileA",
"InternetOpenA","InternetConnectA"]

def check_malicious_function(pe):
    if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress ==0:
        print("[!] Import Not Found !")
        
    import_table = []
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = entry.dll.decode("utf-8")
        for imp in entry.imports:
            if imp.name == None:
                import_name = "Ordinal: " + str(imp.ordinal)
            else:
                import_name = imp.name.decode("utf-8")
                
            import_table.append([import_name,dll_name])
            
    function_len = len(import_table)
    print("\033[32m[\033[34m*\033[32m] Function in Binary File : %d " % (function_len))
    headers = ["Potential Malicious Function Found","DLL"]
    ml_get = []
    count_mf = len(MALICIOUS_FUNCTION)
    print("\033[32m[\033[34m*\033[32m] Potential Malicious Function  : %d " % (count_mf))
    for table_function in import_table:
        for ml in MALICIOUS_FUNCTION:
            if ml == table_function[0]:
                ml_get.append(["\033[34m%s\033[00m" % (ml),"\033[38;5;184m%s\033[00m" % (table_function[1])])
            else:
                pass
    
    ratio = []
    count_ml = len(ml_get)
    ratio.append([count_ml,count_mf])
    
    print(tabulate(ml_get,headers=headers,tablefmt="fancy_grid"))
    print(tabulate(ratio,headers=["Potential Malicious Function","Total Binary Function"],tablefmt="fancy_grid"))


def get_imports_function(pe):
	if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress == 0:
		print("no imports found")

	import_table = []
	headers = ["Import Name", "DLL Name"]

	for entry in pe.DIRECTORY_ENTRY_IMPORT:
		dll_name = entry.dll.decode("utf-8")
		for imp in entry.imports:
			if imp.name == None: import_name = "Ordinal: " + str(imp.ordinal)
			else: import_name = imp.name.decode("utf-8")
			import_table.append([import_name, dll_name])

	print(tabulate(import_table, headers=headers, tablefmt="fancy_grid"))

def sha256sum(filename):
    f=open(filename,"r",encoding="cp437")
    content = f.read()
    f.close()
    h = hashlib.sha256()
    h.update(content.encode("cp437"))
    hex_digest = h.hexdigest()
    return hex_digest

def sha256sum_bin(filename):
    f=open(filename,"rb")
    content = f.read()
    f.close()
    h = hashlib.sha256()
    h.update(content)
    hex_digest = h.hexdigest()
    return hex_digest


if __name__ == '__main__':
    python_version()
    clear_os()
    print(banner)
    while True:
        try:
            t = datetime.now().strftime("%H:%M:%S")
            console = str(input("\033[00m[\033[38;5;160m%s\033[00m:Malware@Main] \033[38;5;160m>> " % (t)))

            if console =="exit" or console =="quit":
                sys.exit()
            
            elif console.startswith("!")==True:
                os.system(console[1:])
        
            elif console =="help" or console =="?" or console =="h":
                print("[****************************************************************]")
                print("[                  Malware Scan                                  ]")
                print("[  commands                  descriptions                        ]")
                print("[ ----------               --------------                        ]")
                print("[ banner                    Banner                               ]")
                print("[ cls or clear              Clear Console                        ]")
                print("[ xsearch_uf                Xsearch upload file to virtustotal   ]")
                print("[ xsearch_sh                Xsearch with hash file               ]")
                print("[ xsearch_uu                Xsearch Scan URL                     ]")
                print("[ !command                  !dir, !type <file> etc...            ]")
                print("[ md5sum <file>             Get Hash Md5 Of target file          ]")
                print("[ md5sumbin <file>          Get MD5 Bin File                     ]")
                print("[ sha256sum <file>          Get SHA256 File                      ]")
                print("[ sha256sumbin <file>       Get SHA256 Bin File                  ]")
                print("[ show_import <file>        Get Import Function From PE File     ]")
                print("[ check_function <file>     Check Function Malicious in Binary   ]")
                print("[ dump_info <file>          Dump PE info of Binary File          ]")
                print("[ strings <file>            Strings Output                       ]")
                print("[****************************************************************]")
                print("\n\n")
            
            elif console =="clear" or console =="cls":
                clear_os()
            
            elif console.startswith("show_import")==True:
                shlex_console_si = shlex.split(console)
                if len(shlex_console_si) < 2:
                    print("\033[38;5;160m[!] Error Show Import : %s <filename>\033[00m" % (shlex_console_si[0]))
                else:
                    try:
                        p = pefile.PE(shlex_console_si[1])
                        get_imports_function(p)
                    except:
                        print("\033[38;5;160m[!] Error Show Import ")
            

            elif console.startswith("strings")==True:
                shlex_console_strings = shlex.split(console)
                if len(shlex_console_strings) < 2:
                    print("\033[38;5;160m[!] Error Show Import : %s <filename>\033[00m" % (shlex_console_si[0]))
                else:
                    try:
                        p = subprocess.Popen(["strings",shlex_console_strings[1]],shell=True,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                        out_p = p.stdout.read() + p.stderr.read()
                        out_p = out_p.decode("utf-8")
                        print(out_p)
                    except:
                        print("\033[38;5;160m[!] Error Show strings")

            
            elif console.startswith("dump_info")==True:
                shlex_console_di = shlex.split(console)
                if len(shlex_console_di) < 2:
                    print("\033[38;5;160m[!] Error Dump Info : %s <filename>\033[00m" % (shlex_console_si[0]))
                else:
                    try:
                        p = pefile.PE(shlex_console_di[1])
                        p.print_info()
                    except:
                        print("\033[38;5;160m[!] Error dump_info")
            
            elif console.startswith("check_function")==True:
                shlex_console_f = shlex.split(console)
                if len(shlex_console_f) < 2:
                    print("\033[38;5;160m[!] Error Show Import : %s <filename>" % (shlex_console_f[0]))
                else:
                    try:
                        p = pefile.PE(shlex_console_f[1])
                        check_malicious_function(p)
                    except:
                        print("\033[38;5;160m[!] Error Show Import")

            
            elif console.startswith("md5sum")==True:
                shlex_console_main = shlex.split(console)
                if len(shlex_console_main) < 2:
                    print("\033[38;5;160m[!] Error : usage md5sum <file>")
                else:
                    check_file_exists = os.path.exists(shlex_console_main[1])
                    if check_file_exists ==True:
                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (shlex_console_main[1]))
                        h = md5sum(shlex_console_main[1])
                        b = get_bytes(shlex_console_main[1])
                        print("\033[32m[\033[34m*\033[32m] MD5 RAW Hash : %s\n\033[32m[\033[34m*\033[32m] Filename : %s\n\033[32m[\033[34m*\033[32m] Size : %d Bytes" % (h,shlex_console_main[1],b))
                    else:
                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (shlex_console_main[1]))
            
            elif console.startswith("md5sumbin") ==True:
                shlex_console_main = shlex.split(console)
                if len(shlex_console_main) < 2:
                    print("\033[38;5;160m[!] Error : usage md5sumbin <file>")
                else:
                    check_file_exists = os.path.exists(shlex_console_main[1])
                    if check_file_exists ==True:
                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (shlex_console_main[1]))
                        h = md5sum_bin(shlex_console_main[1])
                        b = get_bytes(shlex_console_main[1])
                        print("\033[32m[\033[34m*\033[32m] MD5 BIN Hash : %s\n\033[32m[\033[34m*\033[32m] Filename : %s\n\033[32m[\033[34m*\033[32m] Size : %d Bytes" % (h,shlex_console_main[1],b))
                    else:
                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (shlex_console_main[1]))
            
            elif console.startswith("sha256sum")==True:
                shlex_console_main = shlex.split(console)
                if len(shlex_console_main) < 2:
                    print("\033[38;5;160m[!] Error : usage sha256sum <file>")
                else:
                    check_file_exists = os.path.exists(shlex_console_main[1])
                    if check_file_exists ==True:
                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (shlex_console_main[1]))
                        h = sha256sum(shlex_console_main[1])
                        b = get_bytes(shlex_console_main[1])
                        print("\033[32m[\033[34m*\033[32m] SHA256 RAW Hash : %s\n\033[32m[\033[34m*\033[32m] Filename : %s\n\033[32m[\033[34m*\033[32m] Size : %d Bytes" % (h,shlex_console_main[1],b))
                    else:
                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (shlex_console_main[1]))
            
            elif console.startswith("sha256sumbin")==True:
                shlex_console_main = shlex.split(console)
                if len(shlex_console_main) < 2:
                    print("\033[38;5;160m[!] Error : usage sha256sumbin <file>")
                else:
                    check_file_exists = os.path.exists(shlex_console_main[1])
                    if check_file_exists ==True:
                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (shlex_console_main[1]))
                        h = sha256sum_bin(shlex_console_main[1])
                        b = get_bytes(shlex_console_main[1])
                        print("\033[32m[\033[34m*\033[32m] SHA256 BIN Hash : %s\n\033[32m[\033[34m*\033[32m] Filename : %s\n\033[32m[\033[34m*\033[32m] Size : %d Bytes" % (h,shlex_console_main[1],b))
                    else:
                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (shlex_console_main[1]))
            
            elif console =="xsearch_uf":
                FILENAME = "None"
                while True:
                    try:
                        t = datetime.now().strftime("%H:%M:%S")
                        console_xsearch_uf = str(input("\033[00m[\033[38;5;160m%s\033[00m:Malware@Xsearch_upload_file] \033[38;5;160m>> " % (t)))
                        
                        if console_xsearch_uf =="exit" or console_xsearch_uf =="quit":
                            sys.exit()
                        
                        elif console_xsearch_uf =="back" or console_xsearch_uf =="b":
                            break

                        elif console_xsearch_uf.startswith("!")==True:
                            os.system(console_xsearch_uf[1:])
                        
                        elif console_xsearch_uf =="help" or console_xsearch_uf =="?" or console_xsearch_uf =="h":
                            print("[  commands                  descriptions                        ]")
                            print("[ ----------               --------------                        ]")
                            print("[ info                      show info module                     ]")
                            print("[ set                       FILENAME,etc...                      ]")
                            print("[ back                      Back To Main                         ]")
                            print("[ run                       Run Module                           ]")
                            print("\n")
                            print("\n")
                        
                        elif console_xsearch_uf =="info":
                            print("[  NAME                    VALUE")
                            print("[ ----------           --------------")
                            print("[ FILENAME                   %s" % (FILENAME))

                        elif console_xsearch_uf.startswith("set")==True:
                            shlex_console = shlex.split(console_xsearch_uf)
                            if len(shlex_console) <3:
                                print("\033[38;5;160m[!] Error usage : exemple : set FILENAME <value> for show options type 'info'\033[00m")
                            else:
                                if shlex_console[1] =="filename" or shlex_console[1] =="FILENAME":
                                    value_filename = shlex_console[2]
                                    check_value = os.path.exists(value_filename)
                                    if check_value ==True:
                                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (value_filename))
                                        FILENAME = value_filename
                                        print("\033[32m[\033[34m*\033[32m] FILENAME => %s \033[00m" % (FILENAME))
                                    else:
                                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (value_filename))
                        
                        elif console_xsearch_uf.startswith("run")==True:
                            if FILENAME ==None:
                                print("\033[38;5;160m[!] Error FILENAME => None !\033[00m")
                            else:
                                print("\033[32m[\033[34m*\033[32m] if you don't have a key you can create one from this link\nLink=> \033[34mhttps://developers.virustotal.com/v3.0/reference\033[00m")
                                api_key = str(input("\033[00m[\033[38;5;160m%s\033[00m:Enter Virustotal API Key \033[38;5;160m>> " % (t)))
                                send_file_api(api_key,FILENAME)

                        else:
                            print("\033[38;5;160m[!] Error Command Not Found !")

                    except KeyboardInterrupt:
                        print("\033[38;5;160m[!] Error CTRl+C")
            
            elif console =="xsearch_sh":
                FILENAME = "None"
                while True:
                    try:
                        t = datetime.now().strftime("%H:%M:%S")
                        console_xsearch_sh = str(input("\033[00m[\033[38;5;160m%s\033[00m:Malware@Xsearch_search_hash] \033[38;5;160m>> " % (t)))
                        
                        if console_xsearch_sh =="exit" or console_xsearch_sh =="quit":
                            sys.exit()
                        
                        elif console_xsearch_sh =="back" or console_xsearch_sh =="b":
                            break

                        elif console_xsearch_sh.startswith("!")==True:
                            os.system(console_xsearch_sh[1:])
                        
                        elif console_xsearch_sh =="help" or console_xsearch_sh =="?" or console_xsearch_sh =="h":
                            print("[  commands                  descriptions                        ]")
                            print("[ ----------               --------------                        ]")
                            print("[ info                      show info module                     ]")
                            print("[ set                       FILENAME,etc...                      ]")
                            print("[ back                      Back To Main                         ]")
                            print("[ run                       Run Module                           ]")
                            print("\n")
                            print("\n")
                        
                        elif console_xsearch_sh =="info":
                            print("[  NAME                    VALUE")
                            print("[ ----------           --------------")
                            print("[ FILENAME                   %s" % (FILENAME))
                            print("")

                        elif console_xsearch_sh.startswith("set")==True:
                            shlex_console = shlex.split(console_xsearch_sh)
                            if len(shlex_console) <3:
                                print("\033[38;5;160m[!] Error usage : exemple : set FILENAME <value> for show options type 'info'\033[00m")
                            else:
                                if shlex_console[1] =="filename" or shlex_console[1] =="FILENAME":
                                    value_filename = shlex_console[2]
                                    check_value = os.path.exists(value_filename)
                                    if check_value ==True:
                                        print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (value_filename))
                                        FILENAME = value_filename
                                        print("\033[32m[\033[34m*\033[32m] FILENAME => %s \033[00m" % (FILENAME))
                                    else:
                                        print("\033[38;5;160m[!] Error %s Not Found !\033[00m" % (value_filename))
                        
                        elif console_xsearch_sh.startswith("run")==True:
                            if FILENAME ==None:
                                print("\033[38;5;160m[!] Error FILENAME => None !\033[00m")
                            else:
                                print("\033[32m[\033[34m*\033[32m] if you don't have a key you can create one from this link\nLink=> \033[34mhttps://developers.virustotal.com/v3.0/reference\033[00m")
                                api_key = str(input("\033[00m[\033[38;5;160m%s\033[00m:Enter Virustotal API Key \033[38;5;160m>> " % (t)))
                                hash_file = sha256sum_bin(FILENAME)
                                send_requests_api(api_key,hash_file)

                        else:
                            print("\033[38;5;160m[!] Error Command Not Found !")

                    except KeyboardInterrupt:
                        print("\033[38;5;160m[!] Error CTRl+C")
            
            elif console =="xsearch_uu":
                URL = "None"
                while True:
                    try:
                        t = datetime.now().strftime("%H:%M:%S")
                        console_xsearch_uu = str(input("\033[00m[\033[38;5;160m%s\033[00m:Malware@Xsearch_search_url] \033[38;5;160m>> " % (t)))
                        shlex_console = shlex.split(console_xsearch_uu)
                        
                        if console_xsearch_uu =="exit" or console_xsearch_uu =="quit":
                            sys.exit()
                        
                        elif console_xsearch_uu =="back" or console_xsearch_uu =="b":
                            break

                        elif console_xsearch_uu.startswith("!")==True:
                            os.system(console_xsearch_sh[1:])
                        
                        elif console_xsearch_uu =="help" or console_xsearch_uu =="?" or console_xsearch_uu =="h":
                            print("[  commands                  descriptions                        ]")
                            print("[ ----------               --------------                        ]")
                            print("[ info                      show info module                     ]")
                            print("[ set                       FILENAME,etc...                      ]")
                            print("[ back                      Back To Main                         ]")
                            print("[ run                       Run Module                           ]")
                            print("\n")
                            print("\n")
                        
                        elif console_xsearch_uu =="info":
                            print("[  NAME                    VALUE")
                            print("[ ----------           --------------")
                            print("[ URL                         %s" % (URL))
                            print("\n")

                        elif console_xsearch_uu.startswith("set")==True:
                            shlex_console = shlex.split(console_xsearch_uu)
                            if len(shlex_console) <3:
                                print("\033[38;5;160m[!] Error usage : exemple : set URL <value> for show options type 'info'\033[00m")
                            else:
                                if shlex_console[1] =="url" or shlex_console[1] =="URL":
                                    value_url = shlex_console[2]
                                    print("\033[32m[\033[34m*\033[32m] %s Found !\033[00m" % (value_url))
                                    URL = value_url
                                    print("\033[32m[\033[34m*\033[32m] URL => %s \033[00m" % (URL))
                                else:
                                    print("\033[38;5;160m[!] Error Options !")
                        
                        elif console_xsearch_uu.startswith("run")==True:
                            if URL ==None:
                                print("\033[38;5;160m[!] Error URL => None !\033[00m")
                            else:
                                print("\033[32m[\033[34m*\033[32m] if you don't have a key you can create one from this link\nLink=> \033[34mhttps://developers.virustotal.com/v3.0/reference\033[00m")
                                api_key = str(input("\033[00m[\033[38;5;160m%s\033[00m:Enter Virustotal API Key \033[38;5;160m>> " % (t)))
                                send_url_api(api_key,URL)

                        else:
                            print("\033[38;5;160m[!] Error Command Not Found !")

                    except KeyboardInterrupt:
                        print("\033[38;5;160m[!] Error CTRl+C")
            
            elif console =="banner":
                print(banner)

            else:
                print("\033[38;5;160m[!] Error Command Not Found !")

        except KeyboardInterrupt:
            print("[!] Error CTRL+C")
